package com.leauto.link.lightcar;

import android.app.ActivityManager;
import android.app.ActivityManager.MemoryInfo;
import android.app.ActivityManager.RunningTaskInfo;
import android.app.KeyguardManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.provider.Settings;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.List;

/**
 * Created by lm on 11/25/15.
 */
public class ThincarUtils {
    /**
     * 获取设备状态栏高度
     */
    public static int getStatusBarHeight(Context context) {
        int statusBarHeight = 0;
        try {
            Class clazz = Class.forName("com.android.internal.R$dimen");
            Object object = clazz.newInstance();
            Field field = clazz.getField("status_bar_height");
            // 反射出该对象中status_bar_height字段所对应的在R文件的id值
            // 该id值由系统工具自动生成,文档描述如下:
            // The desired resource identifier, as generated by the aapt tool.
            int id = Integer.parseInt(field.get(object).toString());
            // 依据id值获取到状态栏的高度,单位为像素
            statusBarHeight = context.getResources().getDimensionPixelSize(id);
        } catch (Exception e) {
        }
        return statusBarHeight;
    }


    /**
     * 判断设备当前是否停留在Launcher
     */
    public static boolean currentIsLauncher(Context context) {
        boolean isLauncher = false;
        String topActivityName = getTopActivityName(context);
        if (topActivityName != null && topActivityName.startsWith("HomeActivity")) {
            isLauncher = true;
        }
        return isLauncher;
    }


    /**
     * 获取栈顶Activity名称
     */
    public static String getTopActivityName(Context context) {
        String topActivityName = null;
        ActivityManager activityManager =
                (ActivityManager) (context.getSystemService(Context.ACTIVITY_SERVICE));
        List<RunningTaskInfo> runningTaskInfos = activityManager.getRunningTasks(1);
        if (runningTaskInfos != null) {
            ComponentName f = runningTaskInfos.get(0).topActivity;
            String topActivityClassName = f.getClassName();
            String temp[] = topActivityClassName.split("\\.");
            // 栈顶Activity的名称
            topActivityName = temp[temp.length - 1];
        }
        return topActivityName;
    }


    /**
     * 获取当前内存的可用率
     */
    public static String getAvailMemoryPercent(Context context) {
        String info = null;
        long availMemory = getAvailMemory(context);
        long totalMemory = getTotalMemory();
        float percent = (availMemory * 100 / totalMemory);
        info = percent + "%";
        return info;
    }


    /**
     * 获取内存总大小
     */
    public static long getTotalMemory() {
        // 系统的内存信息文件
        String filePath = "/proc/meminfo";
        String lineString;
        String[] stringArray;
        long totalMemory = 0;
        try {
            FileReader fileReader = new FileReader(filePath);
            BufferedReader bufferedReader = new BufferedReader(fileReader, 1024 * 8);
            // 读取meminfo第一行,获取系统总内存大小
            lineString = bufferedReader.readLine();
            // 按照空格拆分
            stringArray = lineString.split("\\s+");
            // 获得系统总内存,单位KB
            totalMemory = Integer.valueOf(stringArray[1]).intValue();
            bufferedReader.close();
        } catch (IOException e) {
        }
        return totalMemory / 1024;
    }


    /**
     * 获取可用内存大小
     */
    public static long getAvailMemory(Context context) {
        ActivityManager activityManager =
                (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        MemoryInfo memoryInfo = new MemoryInfo();
        activityManager.getMemoryInfo(memoryInfo);
        return memoryInfo.availMem / (1024 * 1024);
    }

    /**
     * 获取屏幕宽
     *
     * @param context
     * @return
     */
    public static int getScreenWidth(Context context) {
        WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        return windowManager.getDefaultDisplay().getWidth();
    }

    /**
     * 获取屏幕高
     *
     * @param context
     * @return
     */
    public static int getScreenHeight(Context context) {
        WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        return windowManager.getDefaultDisplay().getHeight();
    }

    /**
     * 获取屏幕宽
     *
     * @param context
     * @return
     */
    public static int getSystemWidth(Context context) {
        // DisplayMetrics dm = new DisplayMetrics();
        // dm = context.getResources().getDisplayMetrics();
        // int screenWidth = dm.widthPixels;
        // return screenWidth;

        int dpi = 0;
        WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();
        DisplayMetrics dm = new DisplayMetrics();
        @SuppressWarnings("rawtypes")
        Class c;
        try {
            c = Class.forName("android.view.Display");
            @SuppressWarnings("unchecked")
            Method method = c.getMethod("getRealMetrics", DisplayMetrics.class);
            method.invoke(display, dm);
            dpi = dm.widthPixels;
        } catch (Exception e) {
            e.printStackTrace();
            dm = context.getResources().getDisplayMetrics();
            int screenWidth = dm.widthPixels;
            return screenWidth;
        }
        return dpi;
    }

    /**
     * 获取屏幕高
     *
     * @param context
     * @return
     */
    public static int getSystemHeight(Context context) {
        // DisplayMetrics dm = new DisplayMetrics();
        // dm = context.getResources().getDisplayMetrics();
        // int screenHeight = dm.heightPixels;
        // return screenHeight;

        int dpi = 0;
        WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();
        DisplayMetrics dm = new DisplayMetrics();
        @SuppressWarnings("rawtypes")
        Class c;
        try {
            c = Class.forName("android.view.Display");
            @SuppressWarnings("unchecked")
            Method method = c.getMethod("getRealMetrics", DisplayMetrics.class);
            method.invoke(display, dm);
            dpi = dm.heightPixels;
        } catch (Exception e) {
            e.printStackTrace();
            dm = context.getResources().getDisplayMetrics();
            int screenHeight = dm.heightPixels;
            return screenHeight;
        }
        return dpi;
    }

    public static String getMetaDataValue(Context context, String name) {
        Object value = null;
        PackageManager packageManager = context.getPackageManager();
        ApplicationInfo applicationInfo;
        try {
            applicationInfo = packageManager.getApplicationInfo(context.getPackageName(), PackageManager.GET_META_DATA);
            if (applicationInfo != null && applicationInfo.metaData != null) {
                value = applicationInfo.metaData.get(name);
            }
        } catch (PackageManager.NameNotFoundException e) {
            throw new RuntimeException("Could not read the name in the manifest file.", e);
        }
        if (value == null) {
            throw new RuntimeException("The name '" + name
                    + "' is not defined in the manifest file's meta data.");
        }
        return value.toString();
    }


    /**
     * 获取ledaemon版本
     *
     * @param fileName
     * @return
     */
    public static int getLedaemonVersion(String fileName) {

        try {
            FileInputStream inputStream = new FileInputStream(fileName);

            byte[] data = new byte[inputStream.available()];

            inputStream.read(data);
            inputStream.close();

            String versionStr = new String(data);

            return Integer.parseInt(versionStr.trim());

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return -1;
    }


    /**
     * 获取车机ecolink版本code
     *
     * @param context
     * @return
     */
    public static int getVersionCode(Context context) {
        PackageManager packageManager = context.getPackageManager();
        // getPackageName()是你当前类的包名，0代表是获取版本信息
        PackageInfo packInfo = null;
        try {
            packInfo = packageManager.getPackageInfo(context.getPackageName(), 0);
            int version = packInfo.versionCode;
            return version;
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        return 0;
    }

    /**
     * 获取versionName
     *
     * @param context
     * @return
     */
    public static String getVersionName(Context context) {
        try {
            String pkName = context.getPackageName();
            String versionName = context.getPackageManager().getPackageInfo(
                    pkName, 0).versionName;
            return versionName;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }

    /**
     * 获取android id
     *
     * @param context
     * @return
     */
    public static String getAndroidId(Context context) {
        String androidId = Settings.Secure.getString(context.getContentResolver(),
                Settings.Secure.ANDROID_ID);
        if (TextUtils.isEmpty(androidId)) {
            androidId = "null";
        }
        return androidId;
    }

    /**
     * 获取wifi mac地址
     *
     * @param context
     * @return
     */
    public static String getWifiMac(Context context) {
        WifiManager manager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
        if (manager != null) {
            String macAddress = manager.getConnectionInfo().getMacAddress();
            if (TextUtils.isEmpty(macAddress)) {
                macAddress = "unKnown";
            }
            return macAddress;
        }
        return "unKnown";
    }

    /**
     * 判断手机是否锁屏，
     * @return false:没有锁屏
     *          true:锁屏
     */
    public static boolean isScreenLock(Context context) {
        KeyguardManager mKeyguardManager = (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);
        boolean flag = mKeyguardManager.inKeyguardRestrictedInputMode();
        return flag;
    }

    public static int getScreenRealHeight(Context context) {
        DisplayMetrics dm = new DisplayMetrics();
        WindowManager manager = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
        Display display = manager.getDefaultDisplay();

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            display.getRealMetrics(dm);
        } else {
            try {
                Class c = Class.forName("Android.view.Display");
                @SuppressWarnings("unchecked")
                Method method = c.getMethod("getRealMetrics",DisplayMetrics.class);
                method.invoke(display, dm);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return dm.heightPixels;
    }
}
